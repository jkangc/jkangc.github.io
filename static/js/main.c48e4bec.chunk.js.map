{"version":3,"sources":["components/Form.js","components/Titles.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","getWeather","type","name","placeholder","Titles","className","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","then","res","status","json","_this","setState","responseData","main","temp","sys","weather","catch","console","log","stop","this","components_Titles","components_Form","components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c48e4bec.chunk.js","sourcesContent":["import React from \"react\";\n\n// class Form extends React.Component {\n//     render () {\n//         return (\n//             <form onSubmit={this.props.getWeather}>\n//                 <input type=\"text\" name=\"city\" placeholder=\"city...\" />\n//                 <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\n//                 <button>Get Weather</button>\n//             </form>\n//         );\n//     }\n// };\n\nconst Form = (props) => (\n    <form onSubmit={props.getWeather}>\n        <input type=\"text\" name=\"city\" placeholder=\"city...\" />\n        <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\n        <button>Get Weather</button>\n    </form>\n)\n\nexport default Form; \n","import React from \"react\";\n\n// class Titles extends React.Component{\n//     render () {\n//         return (\n//             <div>\n//                 <h1>Weather Finder</h1>\n//                 <p>Find out temperature, condictions and more...</p>\n//             </div>\n//         );\n//     }\n// };\n\nconst Titles = (props) => (\n    <div>\n        <h1 className=\"title-container__title\">Weather Finder</h1>\n        <p className=\"title-container__subtitle\">Find out temperature, condictions and more...</p>\n    </div>\n)\n\nexport default Titles; ","import React from \"react\";\n\n// class Weather extends React.Component{\n//     render () {\n//         return (\n//             <div>\n//                 {this.props.city && this.props.country && <p>Location: {this.props.city}, {this.props.country}</p>}\n//                 {this.props.temperature && <p>Temperature: {this.props.temperature} &#8451;</p>}\n//                 {this.props.humidity && <p>Humidity: {this.props.humidity}</p>}\n//                 {this.props.description && <p>Description: {this.props.description}</p>}\n//                 {this.props.error && <p>{this.props.error}</p>}\n//             </div>\n//         );\n//     }\n// };\n\nconst Weather = (props) => (\n    <div className=\"weather__info\">\n        {props.city && props.country && <p className=\"weather__key\">Location: <span  className=\"weather__value\">{props.city}, {props.country}</span></p>}\n        {props.temperature && <p className=\"weather__key\">Temperature: <span className=\"weather__value\">{props.temperature} &#8451;</span></p>}\n        {props.humidity && <p className=\"weather__key\">Humidity: <span className=\"weather__value\">{props.humidity}</span></p>}\n        {props.description && <p className=\"weather__key\">Description: <span className=\"weather__value\">{props.description}</span></p>}\n        {props.error && <p className=\"weather__error\">{props.error}</p>}\n    </div>\n);\n\nexport default Weather; ","import React from \"react\";\nimport Form from \"./components/Form\";\nimport Titles from \"./components/Titles\";\nimport Weather from \"./components/Weather\";\n\n// const API_KEY = process.env.REACT_APP_WEATHER_API_KEY\nconst API_KEY = \"0402500425321548d2244f701aae1aba\";\n\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}&units=metric`)\n      .then((res) => {       \n        if(res.status === 200) {\n          return res.json();\n        } else {\n          this.setState({\n            temperature: undefined,\n            city: undefined,\n            country: undefined,\n            humidity: undefined,\n            description: undefined,\n            error: \"Please enter correct city name and country name. Ex: New York, US\"\n          });\n        }\n      })\n      .then(responseData => {    //responseData function\n        if(city && country) {\n          this.setState({          //update the state object array\n            temperature: responseData.main.temp,\n            city: responseData.name,\n            country: responseData.sys.country,\n            humidity: responseData.main.humidity,\n            description: responseData.weather[0].description,\n            error: \"\"\n          });\n        } else {\n          \n        }\n      })\n      .catch(error => {\n        console.log('Error fetching and parsing data', error);\n      });  //error function\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Titles />\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                <Form getWeather={this.getWeather}/>\n                  <Weather \n                    temperature={this.state.temperature}\n                    city={this.state.city}\n                    country={this.state.country}\n                    humidity={this.state.humidity}\n                    description={this.state.description}\n                    error={this.state.error}\n                    />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n"],"sourceRoot":""}